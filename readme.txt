git init //把这个目录变成Git可以管理的仓库
git add README.md //文件添加到仓库
git add . //不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部add了 
git commit -m "first commit" //把文件提交到仓库
git remote add origin git@github.com:wangjiax9/practice.git //关联远程仓库
git push -u origin master //把本地库的所有内容推送到远程库上


SVN和GitHub的区别： 
1。速度：
克隆一份全新的目錄，以同樣擁有五個（才五個）分支來說，SVN是同時複製5個版本的文件，也就是說重複五次同樣的動作。而Git只是獲取文件的每個版本的元素，然後只載入主要的分支（master）。在我的經驗，克隆一個擁有將近一萬個提交（commit），五個分支，每個分支有大約1500個文件的SVN，耗了將近一個小時！而Git只用了區區的1分鐘！

2。版本庫（repository）：
據我所知，SVN只能有一個指定中央版本庫。當這個中央版本庫有問題時，所有工作成員都一起癱瘓直到版本庫維修完畢或者新的版本庫設立完成。

而Git可以有無限個版本庫。或者，更正確的說法，每一個Git都是一個版本庫，區別是它們是否擁有活躍目錄（Git Working Tree）。如果主要版本庫（例如：置於GitHub的版本庫）發生了什麼事，工作成員仍然可以在自己的本地版本庫（local repository）提交，等待主要版本庫恢復即可。工作成員也可以提交到其他的版本庫！

3。分支（Branch）
在SVN，分支是一個完整的目錄。且這個目錄擁有完整的實際文件。如果工作成員想要開啟新的分支，那將會影響“全世界”！每個人都會擁有和你一樣的分支。如果你的分支是用來進行破壞工作（安檢測試），那將會像傳染病一樣。

而Git，每個工作成員可以任意在自己的本地版本庫開啟無限個分支。舉例：當我想嘗試破壞自己的程序（安檢測試），並且想保留這些被修改的文件供日後使用，我可以開一個分支，做我喜歡的事。完全不需擔心妨礙其他工作成員。只要我不合并及提交到主要版本庫，沒有一個工作成員會被影響。等到我不需要這個分支時，我只要把它從我的本地版本庫刪除即可。無痛無癢。
Git的分支名是可以使用不同名字的。例如：我的本地分支名為testing，而在主要版本庫的名字其實是master。
最值得一提，我可以在Git的任意一個提交點（commit point）開啟分支！（其中一個方法是使用gitk –all 可觀察整個提交記錄，然後在任意點開啟分支。）

4。提交（Commit）
在SVN，當你提交你的完成品時，它將直接記錄到中央版本庫。當你發現你的完成品存在嚴重問題時，你已經無法阻止事情的發生了。如果網路中斷，你根本沒辦法提交！

而Git的提交完全屬於本地版本庫的活動。而你只需“推”（git push）到主要版本庫即可。Git的“推”其實是在執行“同步”（Sync）。

5。重新設立起點（Rebase）
我沒在SVN嘗試過，不知道有沒有這樣的功能。

在Git，如果你想把別人的最新提交設立為現在這個分支的起點，只要執行git rebase branch_name 即可。這個和合并（merge）不同點是，merge會依據修改的時間視為最新，而Rebase會要求你去解決雙方都有修改過的地方的矛盾（conflict）。

A - B - E
\- C - D
A - B - E
\ - C - D

6。系統檔案
SVN會在每一個目錄置放一個.svn。如果想移除這些.svn是很累的。
而Git會在目錄起點擁有一個.git目錄，以及.gitignore。

對我而言，管理一個Git 的版本庫是很容易的事。


设置Git名字
git config -global user.name "HuangHaoBin"
设置git邮箱
git config -global user.email "huanghaobin848@163.com"

设置SSH key





